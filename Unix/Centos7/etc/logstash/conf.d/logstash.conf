input {
	beats {
		port => 5044
    }
}

filter {
    if [type] == "apache_access" {
        grok {
            match => { "message" => "%{COMBINEDAPACHELOG}" }
        }
    }
}

filter {
    if [type] == "apache_error" {
        grok {
		  patterns_dir => "/etc/logstash/conf.d/patterns/extra"
        match => { "message" => "%{APACHEERRORLOG}" }
        }
    }
}

filter {
    if [type] == "exim-log" {
        multiline {
            pattern => "%{DATE} %{TIME} %{HOSTNAME:msgid} (=>|Completed)"
            what => "previous"
            }
            grok {
                break_on_match => false
                match => [
                    "message", "<= %{NOTSPACE:from} H=%{NOTSPACE:server} \[%{IP:src_ip}\]"
                    ]
            }

            grok {
                break_on_match => false
                match => [
                    "message", "=> %{USERNAME:username} <%{NOTSPACE:dest}> R=%{WORD:transport}"
                    ]
            }

            grok {
                break_on_match => false
                match => [
                    "message", "=> %{NOTSPACE:dest} R=%{WORD:transport}"
                    ]
            }

            grok {
                break_on_match => false
                match => [
                    "message", "%{DATE} %{TIME} H=%{NOTSPACE:server}%{GREEDYDATA} \[%{IP:src_ip}\]  F=<%{NOTSPACE:mail_to}> temporarily rejected RCPT <%{NOTSPACE:dest}>: greylisted"
                ]
            }
    }
}

filter {
    if [src_ip]  {
        geoip {
            source => "src_ip"
            target => "geoip"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float" ]
        }
    }

    if [clientip]  {
        geoip {
            source => "clientip"
            target => "geoip"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float" ]
        }
    }

    if [srcip]  {
        geoip {
            source => "srcip"
            target => "geoip"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float" ]
        }
    }
}

filter {
	if [type] == "syslog" {
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
			add_field => [ "received_at", "%{@timestamp}" ]
			add_field => [ "received_from", "%{host}" ]
		}
		syslog_pri { }
		date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
		}
	}
}


output {
  elasticsearch {
    hosts => "10.99.10.88:9200"
    sniffing => true
    manage_template => false
    index => "logstash-%{+YYYY.MM.dd}"
    document_type => "%{[@metadata][type]}"
  }
}
